{"ast":null,"code":"const debug = require('debug')('log4js:tcp');\nconst net = require('net');\nfunction appender(config, layout) {\n  let canWrite = false;\n  const buffer = [];\n  let socket;\n  let shutdownAttempts = 3;\n  let endMsg = '__LOG4JS__';\n  function write(loggingEvent) {\n    debug('Writing log event to socket');\n    canWrite = socket.write(`${layout(loggingEvent)}${endMsg}`, 'utf8');\n  }\n  function emptyBuffer() {\n    let evt;\n    debug('emptying buffer');\n    while (evt = buffer.shift()) {\n      write(evt);\n    }\n  }\n  function createSocket() {\n    debug(`appender creating socket to ${config.host || 'localhost'}:${config.port || 5000}`);\n    endMsg = `${config.endMsg || '__LOG4JS__'}`;\n    socket = net.createConnection(config.port || 5000, config.host || 'localhost');\n    socket.on('connect', () => {\n      debug('socket connected');\n      emptyBuffer();\n      canWrite = true;\n    });\n    socket.on('drain', () => {\n      debug('drain event received, emptying buffer');\n      canWrite = true;\n      emptyBuffer();\n    });\n    socket.on('timeout', socket.end.bind(socket));\n    socket.on('error', e => {\n      debug('connection error', e);\n      canWrite = false;\n      emptyBuffer();\n    });\n    socket.on('close', createSocket);\n  }\n  createSocket();\n  function log(loggingEvent) {\n    if (canWrite) {\n      write(loggingEvent);\n    } else {\n      debug('buffering log event because it cannot write at the moment');\n      buffer.push(loggingEvent);\n    }\n  }\n  log.shutdown = function (cb) {\n    debug('shutdown called');\n    if (buffer.length && shutdownAttempts) {\n      debug('buffer has items, waiting 100ms to empty');\n      shutdownAttempts -= 1;\n      setTimeout(() => {\n        log.shutdown(cb);\n      }, 100);\n    } else {\n      socket.removeAllListeners('close');\n      socket.end(cb);\n    }\n  };\n  return log;\n}\nfunction configure(config, layouts) {\n  debug(`configure with config = ${config}`);\n  let layout = function (loggingEvent) {\n    return loggingEvent.serialise();\n  };\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return appender(config, layout);\n}\nmodule.exports.configure = configure;","map":{"version":3,"names":["debug","require","net","appender","config","layout","canWrite","buffer","socket","shutdownAttempts","endMsg","write","loggingEvent","emptyBuffer","evt","shift","createSocket","host","port","createConnection","on","end","bind","e","log","push","shutdown","cb","length","setTimeout","removeAllListeners","configure","layouts","serialise","type","module","exports"],"sources":["C:/Claro/chronos-angular/node_modules/log4js/lib/appenders/tcp.js"],"sourcesContent":["const debug = require('debug')('log4js:tcp');\nconst net = require('net');\n\nfunction appender(config, layout) {\n  let canWrite = false;\n  const buffer = [];\n  let socket;\n  let shutdownAttempts = 3;\n  let endMsg = '__LOG4JS__';\n\n  function write(loggingEvent) {\n    debug('Writing log event to socket');\n    canWrite = socket.write(`${layout(loggingEvent)}${endMsg}`, 'utf8');\n  }\n\n  function emptyBuffer() {\n    let evt;\n    debug('emptying buffer');\n    while ((evt = buffer.shift())) {\n      write(evt);\n    }\n  }\n\n  function createSocket() {\n    debug(\n      `appender creating socket to ${config.host || 'localhost'}:${\n        config.port || 5000\n      }`\n    );\n    endMsg = `${config.endMsg || '__LOG4JS__'}`;\n    socket = net.createConnection(\n      config.port || 5000,\n      config.host || 'localhost'\n    );\n    socket.on('connect', () => {\n      debug('socket connected');\n      emptyBuffer();\n      canWrite = true;\n    });\n    socket.on('drain', () => {\n      debug('drain event received, emptying buffer');\n      canWrite = true;\n      emptyBuffer();\n    });\n    socket.on('timeout', socket.end.bind(socket));\n    socket.on('error', (e) => {\n      debug('connection error', e);\n      canWrite = false;\n      emptyBuffer();\n    });\n    socket.on('close', createSocket);\n  }\n\n  createSocket();\n\n  function log(loggingEvent) {\n    if (canWrite) {\n      write(loggingEvent);\n    } else {\n      debug('buffering log event because it cannot write at the moment');\n      buffer.push(loggingEvent);\n    }\n  }\n\n  log.shutdown = function (cb) {\n    debug('shutdown called');\n    if (buffer.length && shutdownAttempts) {\n      debug('buffer has items, waiting 100ms to empty');\n      shutdownAttempts -= 1;\n      setTimeout(() => {\n        log.shutdown(cb);\n      }, 100);\n    } else {\n      socket.removeAllListeners('close');\n      socket.end(cb);\n    }\n  };\n  return log;\n}\n\nfunction configure(config, layouts) {\n  debug(`configure with config = ${config}`);\n  let layout = function (loggingEvent) {\n    return loggingEvent.serialise();\n  };\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return appender(config, layout);\n}\n\nmodule.exports.configure = configure;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC;AAC5C,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAE1B,SAASE,QAAQA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAChC,IAAIC,QAAQ,GAAG,KAAK;EACpB,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,MAAM;EACV,IAAIC,gBAAgB,GAAG,CAAC;EACxB,IAAIC,MAAM,GAAG,YAAY;EAEzB,SAASC,KAAKA,CAACC,YAAY,EAAE;IAC3BZ,KAAK,CAAC,6BAA6B,CAAC;IACpCM,QAAQ,GAAGE,MAAM,CAACG,KAAK,CAAE,GAAEN,MAAM,CAACO,YAAY,CAAE,GAAEF,MAAO,EAAC,EAAE,MAAM,CAAC;EACrE;EAEA,SAASG,WAAWA,CAAA,EAAG;IACrB,IAAIC,GAAG;IACPd,KAAK,CAAC,iBAAiB,CAAC;IACxB,OAAQc,GAAG,GAAGP,MAAM,CAACQ,KAAK,CAAC,CAAC,EAAG;MAC7BJ,KAAK,CAACG,GAAG,CAAC;IACZ;EACF;EAEA,SAASE,YAAYA,CAAA,EAAG;IACtBhB,KAAK,CACF,+BAA8BI,MAAM,CAACa,IAAI,IAAI,WAAY,IACxDb,MAAM,CAACc,IAAI,IAAI,IAChB,EACH,CAAC;IACDR,MAAM,GAAI,GAAEN,MAAM,CAACM,MAAM,IAAI,YAAa,EAAC;IAC3CF,MAAM,GAAGN,GAAG,CAACiB,gBAAgB,CAC3Bf,MAAM,CAACc,IAAI,IAAI,IAAI,EACnBd,MAAM,CAACa,IAAI,IAAI,WACjB,CAAC;IACDT,MAAM,CAACY,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBpB,KAAK,CAAC,kBAAkB,CAAC;MACzBa,WAAW,CAAC,CAAC;MACbP,QAAQ,GAAG,IAAI;IACjB,CAAC,CAAC;IACFE,MAAM,CAACY,EAAE,CAAC,OAAO,EAAE,MAAM;MACvBpB,KAAK,CAAC,uCAAuC,CAAC;MAC9CM,QAAQ,GAAG,IAAI;MACfO,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IACFL,MAAM,CAACY,EAAE,CAAC,SAAS,EAAEZ,MAAM,CAACa,GAAG,CAACC,IAAI,CAACd,MAAM,CAAC,CAAC;IAC7CA,MAAM,CAACY,EAAE,CAAC,OAAO,EAAGG,CAAC,IAAK;MACxBvB,KAAK,CAAC,kBAAkB,EAAEuB,CAAC,CAAC;MAC5BjB,QAAQ,GAAG,KAAK;MAChBO,WAAW,CAAC,CAAC;IACf,CAAC,CAAC;IACFL,MAAM,CAACY,EAAE,CAAC,OAAO,EAAEJ,YAAY,CAAC;EAClC;EAEAA,YAAY,CAAC,CAAC;EAEd,SAASQ,GAAGA,CAACZ,YAAY,EAAE;IACzB,IAAIN,QAAQ,EAAE;MACZK,KAAK,CAACC,YAAY,CAAC;IACrB,CAAC,MAAM;MACLZ,KAAK,CAAC,2DAA2D,CAAC;MAClEO,MAAM,CAACkB,IAAI,CAACb,YAAY,CAAC;IAC3B;EACF;EAEAY,GAAG,CAACE,QAAQ,GAAG,UAAUC,EAAE,EAAE;IAC3B3B,KAAK,CAAC,iBAAiB,CAAC;IACxB,IAAIO,MAAM,CAACqB,MAAM,IAAInB,gBAAgB,EAAE;MACrCT,KAAK,CAAC,0CAA0C,CAAC;MACjDS,gBAAgB,IAAI,CAAC;MACrBoB,UAAU,CAAC,MAAM;QACfL,GAAG,CAACE,QAAQ,CAACC,EAAE,CAAC;MAClB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,MAAM;MACLnB,MAAM,CAACsB,kBAAkB,CAAC,OAAO,CAAC;MAClCtB,MAAM,CAACa,GAAG,CAACM,EAAE,CAAC;IAChB;EACF,CAAC;EACD,OAAOH,GAAG;AACZ;AAEA,SAASO,SAASA,CAAC3B,MAAM,EAAE4B,OAAO,EAAE;EAClChC,KAAK,CAAE,2BAA0BI,MAAO,EAAC,CAAC;EAC1C,IAAIC,MAAM,GAAG,SAAAA,CAAUO,YAAY,EAAE;IACnC,OAAOA,YAAY,CAACqB,SAAS,CAAC,CAAC;EACjC,CAAC;EACD,IAAI7B,MAAM,CAACC,MAAM,EAAE;IACjBA,MAAM,GAAG2B,OAAO,CAAC3B,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC6B,IAAI,EAAE9B,MAAM,CAACC,MAAM,CAAC;EAC5D;EACA,OAAOF,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;AACjC;AAEA8B,MAAM,CAACC,OAAO,CAACL,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}