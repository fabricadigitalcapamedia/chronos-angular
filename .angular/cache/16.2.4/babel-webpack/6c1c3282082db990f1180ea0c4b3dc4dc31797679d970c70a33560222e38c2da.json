{"ast":null,"code":"/* eslint max-classes-per-file: [\"error\", 2] */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_getLocationKeys\"] }] */\n\nconst flatted = require('flatted');\nconst levels = require('./levels');\nclass SerDe {\n  constructor() {\n    const deserialise = {\n      __LOG4JS_undefined__: undefined,\n      __LOG4JS_NaN__: Number('abc'),\n      __LOG4JS_Infinity__: 1 / 0,\n      '__LOG4JS_-Infinity__': -1 / 0\n    };\n    this.deMap = deserialise;\n    this.serMap = {};\n    Object.keys(this.deMap).forEach(key => {\n      const value = this.deMap[key];\n      this.serMap[value] = key;\n    });\n  }\n  canSerialise(key) {\n    if (typeof key === 'string') return false;\n    return key in this.serMap;\n  }\n  serialise(key) {\n    if (this.canSerialise(key)) return this.serMap[key];\n    return key;\n  }\n  canDeserialise(key) {\n    return key in this.deMap;\n  }\n  deserialise(key) {\n    if (this.canDeserialise(key)) return this.deMap[key];\n    return key;\n  }\n}\nconst serde = new SerDe();\n\n/**\n * @name LoggingEvent\n * @namespace Log4js\n */\nclass LoggingEvent {\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {string} categoryName name of category\n   * @param {Log4js.Level} level level of message\n   * @param {Array} data objects to log\n   * @param {Error} [error]\n   * @author Seth Chisamore\n   */\n  constructor(categoryName, level, data, context, location, error) {\n    this.startTime = new Date();\n    this.categoryName = categoryName;\n    this.data = data;\n    this.level = level;\n    this.context = Object.assign({}, context); // eslint-disable-line prefer-object-spread\n    this.pid = process.pid;\n    this.error = error;\n    if (typeof location !== 'undefined') {\n      if (!location || typeof location !== 'object' || Array.isArray(location)) throw new TypeError('Invalid location type passed to LoggingEvent constructor');\n      this.constructor._getLocationKeys().forEach(key => {\n        if (typeof location[key] !== 'undefined') this[key] = location[key];\n      });\n    }\n  }\n\n  /** @private */\n  static _getLocationKeys() {\n    return ['fileName', 'lineNumber', 'columnNumber', 'callStack', 'className', 'functionName', 'functionAlias', 'callerName'];\n  }\n  serialise() {\n    return flatted.stringify(this, (key, value) => {\n      // JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n      // The following allows us to serialize errors (semi) correctly.\n      if (value instanceof Error) {\n        // eslint-disable-next-line prefer-object-spread\n        value = Object.assign({\n          message: value.message,\n          stack: value.stack\n        }, value);\n      }\n      // JSON.stringify({a: Number('abc'), b: 1/0, c: -1/0}) returns {a: null, b: null, c: null}.\n      // The following allows us to serialize to NaN, Infinity and -Infinity correctly.\n      // JSON.stringify([undefined]) returns [null].\n      // The following allows us to serialize to undefined correctly.\n      return serde.serialise(value);\n    });\n  }\n  static deserialise(serialised) {\n    let event;\n    try {\n      const rehydratedEvent = flatted.parse(serialised, (key, value) => {\n        if (value && value.message && value.stack) {\n          const fakeError = new Error(value);\n          Object.keys(value).forEach(k => {\n            fakeError[k] = value[k];\n          });\n          value = fakeError;\n        }\n        return serde.deserialise(value);\n      });\n      this._getLocationKeys().forEach(key => {\n        if (typeof rehydratedEvent[key] !== 'undefined') {\n          if (!rehydratedEvent.location) rehydratedEvent.location = {};\n          rehydratedEvent.location[key] = rehydratedEvent[key];\n        }\n      });\n      event = new LoggingEvent(rehydratedEvent.categoryName, levels.getLevel(rehydratedEvent.level.levelStr), rehydratedEvent.data, rehydratedEvent.context, rehydratedEvent.location, rehydratedEvent.error);\n      event.startTime = new Date(rehydratedEvent.startTime);\n      event.pid = rehydratedEvent.pid;\n      if (rehydratedEvent.cluster) {\n        event.cluster = rehydratedEvent.cluster;\n      }\n    } catch (e) {\n      event = new LoggingEvent('log4js', levels.ERROR, ['Unable to parse log:', serialised, 'because: ', e]);\n    }\n    return event;\n  }\n}\nmodule.exports = LoggingEvent;","map":{"version":3,"names":["flatted","require","levels","SerDe","constructor","deserialise","__LOG4JS_undefined__","undefined","__LOG4JS_NaN__","Number","__LOG4JS_Infinity__","deMap","serMap","Object","keys","forEach","key","value","canSerialise","serialise","canDeserialise","serde","LoggingEvent","categoryName","level","data","context","location","error","startTime","Date","assign","pid","process","Array","isArray","TypeError","_getLocationKeys","stringify","Error","message","stack","serialised","event","rehydratedEvent","parse","fakeError","k","getLevel","levelStr","cluster","e","ERROR","module","exports"],"sources":["C:/Claro/chronos-angular/node_modules/log4js/lib/LoggingEvent.js"],"sourcesContent":["/* eslint max-classes-per-file: [\"error\", 2] */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_getLocationKeys\"] }] */\n\nconst flatted = require('flatted');\nconst levels = require('./levels');\n\nclass SerDe {\n  constructor() {\n    const deserialise = {\n      __LOG4JS_undefined__: undefined,\n      __LOG4JS_NaN__: Number('abc'),\n      __LOG4JS_Infinity__: 1 / 0,\n      '__LOG4JS_-Infinity__': -1 / 0,\n    };\n    this.deMap = deserialise;\n    this.serMap = {};\n    Object.keys(this.deMap).forEach((key) => {\n      const value = this.deMap[key];\n      this.serMap[value] = key;\n    });\n  }\n\n  canSerialise(key) {\n    if (typeof key === 'string') return false;\n    return key in this.serMap;\n  }\n\n  serialise(key) {\n    if (this.canSerialise(key)) return this.serMap[key];\n    return key;\n  }\n\n  canDeserialise(key) {\n    return key in this.deMap;\n  }\n\n  deserialise(key) {\n    if (this.canDeserialise(key)) return this.deMap[key];\n    return key;\n  }\n}\nconst serde = new SerDe();\n\n/**\n * @name LoggingEvent\n * @namespace Log4js\n */\nclass LoggingEvent {\n  /**\n   * Models a logging event.\n   * @constructor\n   * @param {string} categoryName name of category\n   * @param {Log4js.Level} level level of message\n   * @param {Array} data objects to log\n   * @param {Error} [error]\n   * @author Seth Chisamore\n   */\n  constructor(categoryName, level, data, context, location, error) {\n    this.startTime = new Date();\n    this.categoryName = categoryName;\n    this.data = data;\n    this.level = level;\n    this.context = Object.assign({}, context); // eslint-disable-line prefer-object-spread\n    this.pid = process.pid;\n    this.error = error;\n\n    if (typeof location !== 'undefined') {\n      if (!location || typeof location !== 'object' || Array.isArray(location))\n        throw new TypeError(\n          'Invalid location type passed to LoggingEvent constructor'\n        );\n\n      this.constructor._getLocationKeys().forEach((key) => {\n        if (typeof location[key] !== 'undefined') this[key] = location[key];\n      });\n    }\n  }\n\n  /** @private */\n  static _getLocationKeys() {\n    return [\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'callStack',\n      'className',\n      'functionName',\n      'functionAlias',\n      'callerName',\n    ];\n  }\n\n  serialise() {\n    return flatted.stringify(this, (key, value) => {\n      // JSON.stringify(new Error('test')) returns {}, which is not really useful for us.\n      // The following allows us to serialize errors (semi) correctly.\n      if (value instanceof Error) {\n        // eslint-disable-next-line prefer-object-spread\n        value = Object.assign(\n          { message: value.message, stack: value.stack },\n          value\n        );\n      }\n      // JSON.stringify({a: Number('abc'), b: 1/0, c: -1/0}) returns {a: null, b: null, c: null}.\n      // The following allows us to serialize to NaN, Infinity and -Infinity correctly.\n      // JSON.stringify([undefined]) returns [null].\n      // The following allows us to serialize to undefined correctly.\n      return serde.serialise(value);\n    });\n  }\n\n  static deserialise(serialised) {\n    let event;\n    try {\n      const rehydratedEvent = flatted.parse(serialised, (key, value) => {\n        if (value && value.message && value.stack) {\n          const fakeError = new Error(value);\n          Object.keys(value).forEach((k) => {\n            fakeError[k] = value[k];\n          });\n          value = fakeError;\n        }\n        return serde.deserialise(value);\n      });\n      this._getLocationKeys().forEach((key) => {\n        if (typeof rehydratedEvent[key] !== 'undefined') {\n          if (!rehydratedEvent.location) rehydratedEvent.location = {};\n          rehydratedEvent.location[key] = rehydratedEvent[key];\n        }\n      });\n      event = new LoggingEvent(\n        rehydratedEvent.categoryName,\n        levels.getLevel(rehydratedEvent.level.levelStr),\n        rehydratedEvent.data,\n        rehydratedEvent.context,\n        rehydratedEvent.location,\n        rehydratedEvent.error\n      );\n      event.startTime = new Date(rehydratedEvent.startTime);\n      event.pid = rehydratedEvent.pid;\n      if (rehydratedEvent.cluster) {\n        event.cluster = rehydratedEvent.cluster;\n      }\n    } catch (e) {\n      event = new LoggingEvent('log4js', levels.ERROR, [\n        'Unable to parse log:',\n        serialised,\n        'because: ',\n        e,\n      ]);\n    }\n\n    return event;\n  }\n}\n\nmodule.exports = LoggingEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}