{"ast":null,"code":"import { catchError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"../../../shared/config/logger.service\";\nclass LoginService {\n  constructor(http, router, toastr, log) {\n    this.http = http;\n    this.router = router;\n    this.toastr = toastr;\n    this.log = log;\n    this.url = environment.apiUrl;\n  }\n  /* getLogin(data: string): Observable<any> {\n     return this.http.get(this.url+'/seguridad?usuario='+data);\n   }*/\n  getLogin(data) {\n    this.log.log('Inicio Login: ', data);\n    return this.http.get(this.url + '/seguridad?usuario=' + data).pipe(catchError(error => {\n      // Manejar el error aquí, por ejemplo, registrándolo o devolviendo un error personalizado.\n      console.error('Error en la solicitud HTTP:', error);\n      // Devuelve un nuevo observable que emite el error\n      debugger;\n      return error.status.toString();\n    }));\n  }\n  createItem(item) {\n    return this.http.post(this.url + '/servicedemo', item);\n  }\n  // Operación de actualización (PUT)\n  updateItem(id, item) {\n    return this.http.put(this.url + '/servicedemo/' + id, item);\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.LoggerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { LoginService };","map":{"version":3,"names":["catchError","environment","LoginService","constructor","http","router","toastr","log","url","apiUrl","getLogin","data","get","pipe","error","console","status","toString","createItem","item","post","updateItem","id","put","_","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","ToastrService","i4","LoggerService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Claro\\chronos-angular\\src\\app\\module\\seguridad\\service\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../../environments/environment';\nimport { ToastrService } from 'ngx-toastr';\nimport { LoggerService } from '../../../shared/config/logger.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http: HttpClient, private router:Router,private toastr: ToastrService, private log: LoggerService,) { }\n\n  url = environment.apiUrl;\n  \n /* getLogin(data: string): Observable<any> {    \n    return this.http.get(this.url+'/seguridad?usuario='+data);    \n  }*/\n  \n  \n  getLogin(data: string): Observable<any> {\n    this.log.log('Inicio Login: ', data)\n    return this.http.get(this.url + '/seguridad?usuario=' + data).pipe(\n      catchError((error: any) => {\n        // Manejar el error aquí, por ejemplo, registrándolo o devolviendo un error personalizado.\n        console.error('Error en la solicitud HTTP:', error);\n        \n        // Devuelve un nuevo observable que emite el error\n        debugger\n        return (error.status.toString());\n      })\n    );\n  }\n    \n  createItem(item: any): Observable<any> {\n    return this.http.post(this.url+'/servicedemo', item);\n  }\n\n  // Operación de actualización (PUT)\n  updateItem(id: number, item: any): Observable<any> {\n    return this.http.put(this.url+'/servicedemo/'+id, item);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAoB,MAAM;AAEzD,SAASC,WAAW,QAAQ,sCAAsC;;;;;;AAIlE,MAGaC,YAAY;EAEvBC,YAAoBC,IAAgB,EAAUC,MAAa,EAASC,MAAqB,EAAUC,GAAkB;IAAjG,KAAAH,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAAgB,KAAAC,MAAM,GAANA,MAAM;IAAyB,KAAAC,GAAG,GAAHA,GAAG;IAEtG,KAAAC,GAAG,GAAGP,WAAW,CAACQ,MAAM;EAFkG;EAI3H;;;EAKCC,QAAQA,CAACC,IAAY;IACnB,IAAI,CAACJ,GAAG,CAACA,GAAG,CAAC,gBAAgB,EAAEI,IAAI,CAAC;IACpC,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACJ,GAAG,GAAG,qBAAqB,GAAGG,IAAI,CAAC,CAACE,IAAI,CAChEb,UAAU,CAAEc,KAAU,IAAI;MACxB;MACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAEnD;MACA;MACA,OAAQA,KAAK,CAACE,MAAM,CAACC,QAAQ,EAAE;IACjC,CAAC,CAAC,CACH;EACH;EAEAC,UAAUA,CAACC,IAAS;IAClB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACZ,GAAG,GAAC,cAAc,EAAEW,IAAI,CAAC;EACtD;EAEA;EACAE,UAAUA,CAACC,EAAU,EAAEH,IAAS;IAC9B,OAAO,IAAI,CAACf,IAAI,CAACmB,GAAG,CAAC,IAAI,CAACf,GAAG,GAAC,eAAe,GAACc,EAAE,EAAEH,IAAI,CAAC;EACzD;EAAC,QAAAK,CAAA,G;qBAhCUtB,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA,GAAAP,EAAA,CAAAC,QAAA,CAAAO,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZjC,YAAY;IAAAkC,OAAA,EAAZlC,YAAY,CAAAmC,IAAA;IAAAC,UAAA,EAFX;EAAM;;SAEPpC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}