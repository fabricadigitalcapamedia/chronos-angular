{"ast":null,"code":"/* istanbul ignore file */\n// This is used in browsers only and is designed to allow the rest of\n// log4js to continue as if `clustering.js` is in use.\nconst isMaster = () => true;\nconst listeners = [];\nconst sendToListeners = logEvent => {\n  listeners.forEach(l => l(logEvent));\n};\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => isMaster() ? fn() : notMaster,\n  isMaster,\n  send: sendToListeners,\n  onMessage: listener => {\n    listeners.push(listener);\n  }\n};","map":{"version":3,"names":["isMaster","listeners","sendToListeners","logEvent","forEach","l","module","exports","onlyOnMaster","fn","notMaster","send","onMessage","listener","push"],"sources":["C:/Claro/chronos-angular/node_modules/log4js/lib/clusteringBrowser.js"],"sourcesContent":["/* istanbul ignore file */\n// This is used in browsers only and is designed to allow the rest of\n// log4js to continue as if `clustering.js` is in use.\nconst isMaster = () => true;\n\nconst listeners = [];\n\nconst sendToListeners = (logEvent) => {\n  listeners.forEach((l) => l(logEvent));\n};\n\nmodule.exports = {\n  onlyOnMaster: (fn, notMaster) => (isMaster() ? fn() : notMaster),\n  isMaster,\n  send: sendToListeners,\n  onMessage: (listener) => {\n    listeners.push(listener);\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,QAAQ,GAAGA,CAAA,KAAM,IAAI;AAE3B,MAAMC,SAAS,GAAG,EAAE;AAEpB,MAAMC,eAAe,GAAIC,QAAQ,IAAK;EACpCF,SAAS,CAACG,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAACF,QAAQ,CAAC,CAAC;AACvC,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG;EACfC,YAAY,EAAEA,CAACC,EAAE,EAAEC,SAAS,KAAMV,QAAQ,CAAC,CAAC,GAAGS,EAAE,CAAC,CAAC,GAAGC,SAAU;EAChEV,QAAQ;EACRW,IAAI,EAAET,eAAe;EACrBU,SAAS,EAAGC,QAAQ,IAAK;IACvBZ,SAAS,CAACa,IAAI,CAACD,QAAQ,CAAC;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}