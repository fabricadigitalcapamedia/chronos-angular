{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-logger\";\nclass LoggerService {\n  constructor(logger) {\n    this.logger = logger;\n  }\n  winLog(level, message, meta, context) {\n    const metadata = typeof meta === 'object' ? meta : undefined;\n    this.logger.log(level, message, {\n      ...metadata,\n      timestamp: new Date().toISOString(),\n      methodName: context\n    });\n  }\n  log(message, meta, context) {\n    this.winLog('info', message, meta, context);\n  }\n  error(message, meta, context) {\n    this.winLog('info', message, meta, context);\n  }\n  static #_ = this.ɵfac = function LoggerService_Factory(t) {\n    return new (t || LoggerService)(i0.ɵɵinject(i1.NGXLogger));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggerService,\n    factory: LoggerService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { LoggerService };","map":{"version":3,"names":["LoggerService","constructor","logger","winLog","level","message","meta","context","metadata","undefined","log","timestamp","Date","toISOString","methodName","error","_","i0","ɵɵinject","i1","NGXLogger","_2","factory","ɵfac","providedIn"],"sources":["C:\\Claro\\chronos-angular\\src\\app\\shared\\config\\logger.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NGXLogger } from 'ngx-logger';\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class LoggerService {\r\n  \r\n    constructor(private logger: NGXLogger){\r\n    }\r\n\r\n    private winLog(level: string, message: string, meta: any, context?: string ){\r\n        const metadata = typeof meta === 'object' ? meta : undefined;\r\n        this.logger.log(level, message, {\r\n            ...metadata,\r\n            timestamp: new Date().toISOString(),\r\n            methodName: context,\r\n        });\r\n    }\r\n\r\n    log(message: string, meta: any, context?: string): void {\r\n      this.winLog('info', message, meta, context); \r\n    }\r\n  \r\n    error(message: string, meta: any, context?: string): void {\r\n        this.winLog('info', message, meta, context);  \r\n    }\r\n  \r\n   \r\n  \r\n    // Puedes añadir métodos adicionales según sea necesario para tu aplicación\r\n  }"],"mappings":";;AAEA,MAGeA,aAAa;EAExBC,YAAoBC,MAAiB;IAAjB,KAAAA,MAAM,GAANA,MAAM;EAC1B;EAEQC,MAAMA,CAACC,KAAa,EAAEC,OAAe,EAAEC,IAAS,EAAEC,OAAgB;IACtE,MAAMC,QAAQ,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGG,SAAS;IAC5D,IAAI,CAACP,MAAM,CAACQ,GAAG,CAACN,KAAK,EAAEC,OAAO,EAAE;MAC5B,GAAGG,QAAQ;MACXG,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;MACnCC,UAAU,EAAEP;KACf,CAAC;EACN;EAEAG,GAAGA,CAACL,OAAe,EAAEC,IAAS,EAAEC,OAAgB;IAC9C,IAAI,CAACJ,MAAM,CAAC,MAAM,EAAEE,OAAO,EAAEC,IAAI,EAAEC,OAAO,CAAC;EAC7C;EAEAQ,KAAKA,CAACV,OAAe,EAAEC,IAAS,EAAEC,OAAgB;IAC9C,IAAI,CAACJ,MAAM,CAAC,MAAM,EAAEE,OAAO,EAAEC,IAAI,EAAEC,OAAO,CAAC;EAC/C;EAAC,QAAAS,CAAA,G;qBApBUhB,aAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,SAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbrB,aAAa;IAAAsB,OAAA,EAAbtB,aAAa,CAAAuB,IAAA;IAAAC,UAAA,EAFZ;EAAM;;SAEPxB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}