{"ast":null,"code":"const util = require('util');\nconst debug = require('debug')('log4js:configuration');\nconst preProcessingListeners = [];\nconst listeners = [];\nconst not = thing => !thing;\nconst anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);\nconst validIdentifier = thing => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\nconst anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);\nconst addListener = fn => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\nconst addPreProcessingListener = fn => {\n  preProcessingListeners.push(fn);\n  debug(`Added pre-processing listener, now ${preProcessingListeners.length} listeners`);\n};\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach(test => {\n    if (test) {\n      throw new Error(`Problem with log4js configuration: (${util.inspect(config, {\n        depth: 5\n      })}) - ${message}`);\n    }\n  });\n};\nconst configure = candidate => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach(listener => listener(candidate));\n  debug('Configuration pre-processing finished.');\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach(listener => listener(candidate));\n  debug('Configuration finished.');\n};\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not\n};","map":{"version":3,"names":["util","require","debug","preProcessingListeners","listeners","not","thing","anObject","Array","isArray","validIdentifier","test","anInteger","Number","isInteger","addListener","fn","push","length","addPreProcessingListener","throwExceptionIf","config","checks","message","tests","forEach","Error","inspect","depth","configure","candidate","listener","module","exports"],"sources":["C:/Claro/chronos-angular/node_modules/log4js/lib/configuration.js"],"sourcesContent":["const util = require('util');\nconst debug = require('debug')('log4js:configuration');\n\nconst preProcessingListeners = [];\nconst listeners = [];\n\nconst not = (thing) => !thing;\n\nconst anObject = (thing) =>\n  thing && typeof thing === 'object' && !Array.isArray(thing);\n\nconst validIdentifier = (thing) => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n\nconst anInteger = (thing) =>\n  thing && typeof thing === 'number' && Number.isInteger(thing);\n\nconst addListener = (fn) => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\n\nconst addPreProcessingListener = (fn) => {\n  preProcessingListeners.push(fn);\n  debug(\n    `Added pre-processing listener, now ${preProcessingListeners.length} listeners`\n  );\n};\n\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach((test) => {\n    if (test) {\n      throw new Error(\n        `Problem with log4js configuration: (${util.inspect(config, {\n          depth: 5,\n        })}) - ${message}`\n      );\n    }\n  });\n};\n\nconst configure = (candidate) => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach((listener) => listener(candidate));\n  debug('Configuration pre-processing finished.');\n\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach((listener) => listener(candidate));\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not,\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC,CAAC,sBAAsB,CAAC;AAEtD,MAAME,sBAAsB,GAAG,EAAE;AACjC,MAAMC,SAAS,GAAG,EAAE;AAEpB,MAAMC,GAAG,GAAIC,KAAK,IAAK,CAACA,KAAK;AAE7B,MAAMC,QAAQ,GAAID,KAAK,IACrBA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC;AAE7D,MAAMI,eAAe,GAAIJ,KAAK,IAAK,0BAA0B,CAACK,IAAI,CAACL,KAAK,CAAC;AAEzE,MAAMM,SAAS,GAAIN,KAAK,IACtBA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIO,MAAM,CAACC,SAAS,CAACR,KAAK,CAAC;AAE/D,MAAMS,WAAW,GAAIC,EAAE,IAAK;EAC1BZ,SAAS,CAACa,IAAI,CAACD,EAAE,CAAC;EAClBd,KAAK,CAAE,uBAAsBE,SAAS,CAACc,MAAO,YAAW,CAAC;AAC5D,CAAC;AAED,MAAMC,wBAAwB,GAAIH,EAAE,IAAK;EACvCb,sBAAsB,CAACc,IAAI,CAACD,EAAE,CAAC;EAC/Bd,KAAK,CACF,sCAAqCC,sBAAsB,CAACe,MAAO,YACtE,CAAC;AACH,CAAC;AAED,MAAME,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,KAAK;EACpD,MAAMC,KAAK,GAAGhB,KAAK,CAACC,OAAO,CAACa,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;EACvDE,KAAK,CAACC,OAAO,CAAEd,IAAI,IAAK;IACtB,IAAIA,IAAI,EAAE;MACR,MAAM,IAAIe,KAAK,CACZ,uCAAsC1B,IAAI,CAAC2B,OAAO,CAACN,MAAM,EAAE;QAC1DO,KAAK,EAAE;MACT,CAAC,CAAE,OAAML,OAAQ,EACnB,CAAC;IACH;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAMM,SAAS,GAAIC,SAAS,IAAK;EAC/B5B,KAAK,CAAC,qCAAqC,EAAE4B,SAAS,CAAC;EACvDV,gBAAgB,CAACU,SAAS,EAAEzB,GAAG,CAACE,QAAQ,CAACuB,SAAS,CAAC,CAAC,EAAE,oBAAoB,CAAC;EAE3E5B,KAAK,CAAE,qCAAoCC,sBAAsB,CAACe,MAAO,GAAE,CAAC;EAC5Ef,sBAAsB,CAACsB,OAAO,CAAEM,QAAQ,IAAKA,QAAQ,CAACD,SAAS,CAAC,CAAC;EACjE5B,KAAK,CAAC,wCAAwC,CAAC;EAE/CA,KAAK,CAAE,oCAAmCE,SAAS,CAACc,MAAO,GAAE,CAAC;EAC9Dd,SAAS,CAACqB,OAAO,CAAEM,QAAQ,IAAKA,QAAQ,CAACD,SAAS,CAAC,CAAC;EACpD5B,KAAK,CAAC,yBAAyB,CAAC;AAClC,CAAC;AAED8B,MAAM,CAACC,OAAO,GAAG;EACfJ,SAAS;EACTd,WAAW;EACXI,wBAAwB;EACxBC,gBAAgB;EAChBb,QAAQ;EACRK,SAAS;EACTF,eAAe;EACfL;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}