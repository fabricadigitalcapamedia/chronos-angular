{"ast":null,"code":"const debug = require('debug')('log4js:noLogFilter');\n\n/**\n * The function removes empty or null regexp from the array\n * @param {string[]} regexp\n * @returns {string[]} a filtered string array with not empty or null regexp\n */\nfunction removeNullOrEmptyRegexp(regexp) {\n  const filtered = regexp.filter(el => el != null && el !== '');\n  return filtered;\n}\n\n/**\n * Returns a function that will exclude the events in case they match\n * with the regular expressions provided\n * @param {(string|string[])} filters contains the regexp that will be used for the evaluation\n * @param {*} appender\n * @returns {function}\n */\nfunction noLogFilter(filters, appender) {\n  return logEvent => {\n    debug(`Checking data: ${logEvent.data} against filters: ${filters}`);\n    if (typeof filters === 'string') {\n      filters = [filters];\n    }\n    filters = removeNullOrEmptyRegexp(filters);\n    const regex = new RegExp(filters.join('|'), 'i');\n    if (filters.length === 0 || logEvent.data.findIndex(value => regex.test(value)) < 0) {\n      debug('Not excluded, sending to appender');\n      appender(logEvent);\n    }\n  };\n}\nfunction configure(config, layouts, findAppender) {\n  const appender = findAppender(config.appender);\n  return noLogFilter(config.exclude, appender);\n}\nmodule.exports.configure = configure;","map":{"version":3,"names":["debug","require","removeNullOrEmptyRegexp","regexp","filtered","filter","el","noLogFilter","filters","appender","logEvent","data","regex","RegExp","join","length","findIndex","value","test","configure","config","layouts","findAppender","exclude","module","exports"],"sources":["C:/Claro/chronos-angular/node_modules/log4js/lib/appenders/noLogFilter.js"],"sourcesContent":["const debug = require('debug')('log4js:noLogFilter');\n\n/**\n * The function removes empty or null regexp from the array\n * @param {string[]} regexp\n * @returns {string[]} a filtered string array with not empty or null regexp\n */\nfunction removeNullOrEmptyRegexp(regexp) {\n  const filtered = regexp.filter((el) => el != null && el !== '');\n  return filtered;\n}\n\n/**\n * Returns a function that will exclude the events in case they match\n * with the regular expressions provided\n * @param {(string|string[])} filters contains the regexp that will be used for the evaluation\n * @param {*} appender\n * @returns {function}\n */\nfunction noLogFilter(filters, appender) {\n  return (logEvent) => {\n    debug(`Checking data: ${logEvent.data} against filters: ${filters}`);\n    if (typeof filters === 'string') {\n      filters = [filters];\n    }\n    filters = removeNullOrEmptyRegexp(filters);\n    const regex = new RegExp(filters.join('|'), 'i');\n    if (\n      filters.length === 0 ||\n      logEvent.data.findIndex((value) => regex.test(value)) < 0\n    ) {\n      debug('Not excluded, sending to appender');\n      appender(logEvent);\n    }\n  };\n}\n\nfunction configure(config, layouts, findAppender) {\n  const appender = findAppender(config.appender);\n  return noLogFilter(config.exclude, appender);\n}\n\nmodule.exports.configure = configure;\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,MAAM,EAAE;EACvC,MAAMC,QAAQ,GAAGD,MAAM,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,IAAI,IAAI,IAAIA,EAAE,KAAK,EAAE,CAAC;EAC/D,OAAOF,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,WAAWA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EACtC,OAAQC,QAAQ,IAAK;IACnBV,KAAK,CAAE,kBAAiBU,QAAQ,CAACC,IAAK,qBAAoBH,OAAQ,EAAC,CAAC;IACpE,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/BA,OAAO,GAAG,CAACA,OAAO,CAAC;IACrB;IACAA,OAAO,GAAGN,uBAAuB,CAACM,OAAO,CAAC;IAC1C,MAAMI,KAAK,GAAG,IAAIC,MAAM,CAACL,OAAO,CAACM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;IAChD,IACEN,OAAO,CAACO,MAAM,KAAK,CAAC,IACpBL,QAAQ,CAACC,IAAI,CAACK,SAAS,CAAEC,KAAK,IAAKL,KAAK,CAACM,IAAI,CAACD,KAAK,CAAC,CAAC,GAAG,CAAC,EACzD;MACAjB,KAAK,CAAC,mCAAmC,CAAC;MAC1CS,QAAQ,CAACC,QAAQ,CAAC;IACpB;EACF,CAAC;AACH;AAEA,SAASS,SAASA,CAACC,MAAM,EAAEC,OAAO,EAAEC,YAAY,EAAE;EAChD,MAAMb,QAAQ,GAAGa,YAAY,CAACF,MAAM,CAACX,QAAQ,CAAC;EAC9C,OAAOF,WAAW,CAACa,MAAM,CAACG,OAAO,EAAEd,QAAQ,CAAC;AAC9C;AAEAe,MAAM,CAACC,OAAO,CAACN,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}