{"ast":null,"code":"const dateFormat = require('date-format');\nconst os = require('os');\nconst util = require('util');\nconst path = require('path');\nconst url = require('url');\nconst debug = require('debug')('log4js:layouts');\nconst styles = {\n  // styles\n  bold: [1, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  // grayscale\n  white: [37, 39],\n  grey: [90, 39],\n  black: [90, 39],\n  // colors\n  blue: [34, 39],\n  cyan: [36, 39],\n  green: [32, 39],\n  magenta: [35, 39],\n  red: [91, 39],\n  yellow: [33, 39]\n};\nfunction colorizeStart(style) {\n  return style ? `\\x1B[${styles[style][0]}m` : '';\n}\nfunction colorizeEnd(style) {\n  return style ? `\\x1B[${styles[style][1]}m` : '';\n}\n\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\nfunction colorize(str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\nfunction timestampLevelAndCategory(loggingEvent, colour) {\n  return colorize(util.format('[%s] [%s] %s - ', dateFormat.asString(loggingEvent.startTime), loggingEvent.level.toString(), loggingEvent.categoryName), colour);\n}\n\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\nfunction basicLayout(loggingEvent) {\n  return timestampLevelAndCategory(loggingEvent) + util.format(...loggingEvent.data);\n}\n\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\nfunction colouredLayout(loggingEvent) {\n  return timestampLevelAndCategory(loggingEvent, loggingEvent.level.colour) + util.format(...loggingEvent.data);\n}\nfunction messagePassThroughLayout(loggingEvent) {\n  return util.format(...loggingEvent.data);\n}\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * both padding and truncation can be negative.\n * Negative truncation = trunc from end of string\n * Positive truncation = trunc from start of string\n * Negative padding = pad right\n * Positive padding = pad left\n *\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %m{l} where l is an integer, log data.slice(l)\n *  - %m{l,u} where l and u are integers, log data.slice(l, u)\n *  - %d date in constious formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %f filename\n *  - %l line number\n *  - %o column postion\n *  - %s call stack\n *  - %C class name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %M method or function name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %A method or function alias [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %F fully qualified caller name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n *  - %X{<tokenname>} add dynamic tokens to your log. Tokens are specified in logger context\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects.\n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { 'pid' : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @return {Function}\n * @param pattern\n * @param tokens\n * @param timezoneOffset\n *\n * @authors ['Stephan Strittmatter', 'Jan Schmidle']\n */\nfunction patternLayout(pattern, tokens) {\n  const TTCC_CONVERSION_PATTERN = '%r %p %c - %m%n';\n  const regex = /%(-?[0-9]+)?(\\.?-?[0-9]+)?([[\\]cdhmnprzxXyflosCMAF%])(\\{([^}]+)\\})?|([^%]+)/;\n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n  function categoryName(loggingEvent, specifier) {\n    let loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split('.');\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join('.');\n      }\n    }\n    return loggerName;\n  }\n  function formatAsDate(loggingEvent, specifier) {\n    let format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      switch (format) {\n        case 'ISO8601':\n        case 'ISO8601_FORMAT':\n          format = dateFormat.ISO8601_FORMAT;\n          break;\n        case 'ISO8601_WITH_TZ_OFFSET':\n        case 'ISO8601_WITH_TZ_OFFSET_FORMAT':\n          format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n          break;\n        case 'ABSOLUTE':\n          process.emitWarning('Pattern %d{ABSOLUTE} is deprecated in favor of %d{ABSOLUTETIME}. ' + 'Please use %d{ABSOLUTETIME} instead.', 'DeprecationWarning', 'log4js-node-DEP0003');\n          debug('[log4js-node-DEP0003]', 'DEPRECATION: Pattern %d{ABSOLUTE} is deprecated and replaced by %d{ABSOLUTETIME}.');\n        // falls through\n        case 'ABSOLUTETIME':\n        case 'ABSOLUTETIME_FORMAT':\n          format = dateFormat.ABSOLUTETIME_FORMAT;\n          break;\n        case 'DATE':\n          process.emitWarning('Pattern %d{DATE} is deprecated due to the confusion it causes when used. ' + 'Please use %d{DATETIME} instead.', 'DeprecationWarning', 'log4js-node-DEP0004');\n          debug('[log4js-node-DEP0004]', 'DEPRECATION: Pattern %d{DATE} is deprecated and replaced by %d{DATETIME}.');\n        // falls through\n        case 'DATETIME':\n        case 'DATETIME_FORMAT':\n          format = dateFormat.DATETIME_FORMAT;\n          break;\n        // no default\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime);\n  }\n  function hostname() {\n    return os.hostname().toString();\n  }\n  function formatMessage(loggingEvent, specifier) {\n    let dataSlice = loggingEvent.data;\n    if (specifier) {\n      const [lowerBound, upperBound] = specifier.split(',');\n      dataSlice = dataSlice.slice(lowerBound, upperBound);\n    }\n    return util.format(...dataSlice);\n  }\n  function endOfLine() {\n    return os.EOL;\n  }\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime);\n  }\n  function startColour(loggingEvent) {\n    return colorizeStart(loggingEvent.level.colour);\n  }\n  function endColour(loggingEvent) {\n    return colorizeEnd(loggingEvent.level.colour);\n  }\n  function percent() {\n    return '%';\n  }\n  function pid(loggingEvent) {\n    return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();\n  }\n  function clusterInfo() {\n    // this used to try to return the master and worker pids,\n    // but it would never have worked because master pid is not available to workers\n    // leaving this here to maintain compatibility for patterns\n    return pid();\n  }\n  function userDefined(loggingEvent, specifier) {\n    if (typeof tokens[specifier] !== 'undefined') {\n      return typeof tokens[specifier] === 'function' ? tokens[specifier](loggingEvent) : tokens[specifier];\n    }\n    return null;\n  }\n  function contextDefined(loggingEvent, specifier) {\n    const resolver = loggingEvent.context[specifier];\n    if (typeof resolver !== 'undefined') {\n      return typeof resolver === 'function' ? resolver(loggingEvent) : resolver;\n    }\n    return null;\n  }\n  function fileName(loggingEvent, specifier) {\n    let filename = loggingEvent.fileName || '';\n\n    // support for ESM as it uses url instead of path for file\n    /* istanbul ignore next: unsure how to simulate ESM for test coverage */\n    const convertFileURLToPath = function (filepath) {\n      const urlPrefix = 'file://';\n      if (filepath.startsWith(urlPrefix)) {\n        // https://nodejs.org/api/url.html#urlfileurltopathurl\n        if (typeof url.fileURLToPath === 'function') {\n          filepath = url.fileURLToPath(filepath);\n        }\n        // backward-compatible for nodejs pre-10.12.0 (without url.fileURLToPath method)\n        else {\n          // posix: file:///hello/world/foo.txt -> /hello/world/foo.txt -> /hello/world/foo.txt\n          // win32: file:///C:/path/foo.txt     -> /C:/path/foo.txt     -> \\C:\\path\\foo.txt     -> C:\\path\\foo.txt\n          // win32: file://nas/foo.txt          -> //nas/foo.txt        -> nas\\foo.txt          -> \\\\nas\\foo.txt\n          filepath = path.normalize(filepath.replace(new RegExp(`^${urlPrefix}`), ''));\n          if (process.platform === 'win32') {\n            if (filepath.startsWith('\\\\')) {\n              filepath = filepath.slice(1);\n            } else {\n              filepath = path.sep + path.sep + filepath;\n            }\n          }\n        }\n      }\n      return filepath;\n    };\n    filename = convertFileURLToPath(filename);\n    if (specifier) {\n      const fileDepth = parseInt(specifier, 10);\n      const fileList = filename.split(path.sep);\n      if (fileList.length > fileDepth) {\n        filename = fileList.slice(-fileDepth).join(path.sep);\n      }\n    }\n    return filename;\n  }\n  function lineNumber(loggingEvent) {\n    return loggingEvent.lineNumber ? `${loggingEvent.lineNumber}` : '';\n  }\n  function columnNumber(loggingEvent) {\n    return loggingEvent.columnNumber ? `${loggingEvent.columnNumber}` : '';\n  }\n  function callStack(loggingEvent) {\n    return loggingEvent.callStack || '';\n  }\n  function className(loggingEvent) {\n    return loggingEvent.className || '';\n  }\n  function functionName(loggingEvent) {\n    return loggingEvent.functionName || '';\n  }\n  function functionAlias(loggingEvent) {\n    return loggingEvent.functionAlias || '';\n  }\n  function callerName(loggingEvent) {\n    return loggingEvent.callerName || '';\n  }\n  const replacers = {\n    c: categoryName,\n    d: formatAsDate,\n    h: hostname,\n    m: formatMessage,\n    n: endOfLine,\n    p: logLevel,\n    r: startTime,\n    '[': startColour,\n    ']': endColour,\n    y: clusterInfo,\n    z: pid,\n    '%': percent,\n    x: userDefined,\n    X: contextDefined,\n    f: fileName,\n    l: lineNumber,\n    o: columnNumber,\n    s: callStack,\n    C: className,\n    M: functionName,\n    A: functionAlias,\n    F: callerName\n  };\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n  function truncate(truncation, toTruncate) {\n    let len;\n    if (truncation) {\n      len = parseInt(truncation.slice(1), 10);\n      // negative truncate length means truncate from end of string\n      return len > 0 ? toTruncate.slice(0, len) : toTruncate.slice(len);\n    }\n    return toTruncate;\n  }\n  function pad(padding, toPad) {\n    let len;\n    if (padding) {\n      if (padding.charAt(0) === '-') {\n        len = parseInt(padding.slice(1), 10);\n        // Right pad with spaces\n        while (toPad.length < len) {\n          toPad += ' ';\n        }\n      } else {\n        len = parseInt(padding, 10);\n        // Left pad with spaces\n        while (toPad.length < len) {\n          toPad = ` ${toPad}`;\n        }\n      }\n    }\n    return toPad;\n  }\n  function truncateAndPad(toTruncAndPad, truncation, padding) {\n    let replacement = toTruncAndPad;\n    replacement = truncate(truncation, replacement);\n    replacement = pad(padding, replacement);\n    return replacement;\n  }\n  return function (loggingEvent) {\n    let formattedString = '';\n    let result;\n    let searchString = pattern;\n    while ((result = regex.exec(searchString)) !== null) {\n      // const matchedString = result[0];\n      const padding = result[1];\n      const truncation = result[2];\n      const conversionCharacter = result[3];\n      const specifier = result[5];\n      const text = result[6];\n\n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += text.toString();\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        const replacement = replaceToken(conversionCharacter, loggingEvent, specifier);\n        formattedString += truncateAndPad(replacement, truncation, padding);\n      }\n      searchString = searchString.slice(result.index + result[0].length);\n    }\n    return formattedString;\n  };\n}\nconst layoutMakers = {\n  messagePassThrough() {\n    return messagePassThroughLayout;\n  },\n  basic() {\n    return basicLayout;\n  },\n  colored() {\n    return colouredLayout;\n  },\n  coloured() {\n    return colouredLayout;\n  },\n  pattern(config) {\n    return patternLayout(config && config.pattern, config && config.tokens);\n  },\n  dummy() {\n    return dummyLayout;\n  }\n};\nmodule.exports = {\n  basicLayout,\n  messagePassThroughLayout,\n  patternLayout,\n  colouredLayout,\n  coloredLayout: colouredLayout,\n  dummyLayout,\n  addLayout(name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n  layout(name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  }\n};","map":{"version":3,"names":["dateFormat","require","os","util","path","url","debug","styles","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","colorizeStart","style","colorizeEnd","colorize","str","timestampLevelAndCategory","loggingEvent","colour","format","asString","startTime","level","toString","categoryName","basicLayout","data","colouredLayout","messagePassThroughLayout","dummyLayout","patternLayout","pattern","tokens","TTCC_CONVERSION_PATTERN","regex","specifier","loggerName","precision","parseInt","loggerNameBits","split","length","slice","join","formatAsDate","ISO8601_FORMAT","ISO8601_WITH_TZ_OFFSET_FORMAT","process","emitWarning","ABSOLUTETIME_FORMAT","DATETIME_FORMAT","hostname","formatMessage","dataSlice","lowerBound","upperBound","endOfLine","EOL","logLevel","startColour","endColour","percent","pid","clusterInfo","userDefined","contextDefined","resolver","context","fileName","filename","convertFileURLToPath","filepath","urlPrefix","startsWith","fileURLToPath","normalize","replace","RegExp","platform","sep","fileDepth","fileList","lineNumber","columnNumber","callStack","className","functionName","functionAlias","callerName","replacers","c","d","h","m","n","p","r","y","z","x","X","f","l","o","s","C","M","A","F","replaceToken","conversionCharacter","truncate","truncation","toTruncate","len","pad","padding","toPad","charAt","truncateAndPad","toTruncAndPad","replacement","formattedString","result","searchString","exec","text","index","layoutMakers","messagePassThrough","basic","colored","coloured","config","dummy","module","exports","coloredLayout","addLayout","name","serializerGenerator","layout"],"sources":["C:/Claro/chronos-angular/node_modules/log4js/lib/layouts.js"],"sourcesContent":["const dateFormat = require('date-format');\nconst os = require('os');\nconst util = require('util');\nconst path = require('path');\nconst url = require('url');\nconst debug = require('debug')('log4js:layouts');\n\nconst styles = {\n  // styles\n  bold: [1, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  // grayscale\n  white: [37, 39],\n  grey: [90, 39],\n  black: [90, 39],\n  // colors\n  blue: [34, 39],\n  cyan: [36, 39],\n  green: [32, 39],\n  magenta: [35, 39],\n  red: [91, 39],\n  yellow: [33, 39],\n};\n\nfunction colorizeStart(style) {\n  return style ? `\\x1B[${styles[style][0]}m` : '';\n}\n\nfunction colorizeEnd(style) {\n  return style ? `\\x1B[${styles[style][1]}m` : '';\n}\n\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\nfunction colorize(str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\n\nfunction timestampLevelAndCategory(loggingEvent, colour) {\n  return colorize(\n    util.format(\n      '[%s] [%s] %s - ',\n      dateFormat.asString(loggingEvent.startTime),\n      loggingEvent.level.toString(),\n      loggingEvent.categoryName\n    ),\n    colour\n  );\n}\n\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\nfunction basicLayout(loggingEvent) {\n  return (\n    timestampLevelAndCategory(loggingEvent) + util.format(...loggingEvent.data)\n  );\n}\n\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\nfunction colouredLayout(loggingEvent) {\n  return (\n    timestampLevelAndCategory(loggingEvent, loggingEvent.level.colour) +\n    util.format(...loggingEvent.data)\n  );\n}\n\nfunction messagePassThroughLayout(loggingEvent) {\n  return util.format(...loggingEvent.data);\n}\n\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * both padding and truncation can be negative.\n * Negative truncation = trunc from end of string\n * Positive truncation = trunc from start of string\n * Negative padding = pad right\n * Positive padding = pad left\n *\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %m{l} where l is an integer, log data.slice(l)\n *  - %m{l,u} where l and u are integers, log data.slice(l, u)\n *  - %d date in constious formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %f filename\n *  - %l line number\n *  - %o column postion\n *  - %s call stack\n *  - %C class name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %M method or function name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %A method or function alias [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %F fully qualified caller name [#1316](https://github.com/log4js-node/log4js-node/pull/1316)\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n *  - %X{<tokenname>} add dynamic tokens to your log. Tokens are specified in logger context\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects.\n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { 'pid' : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @return {Function}\n * @param pattern\n * @param tokens\n * @param timezoneOffset\n *\n * @authors ['Stephan Strittmatter', 'Jan Schmidle']\n */\nfunction patternLayout(pattern, tokens) {\n  const TTCC_CONVERSION_PATTERN = '%r %p %c - %m%n';\n  const regex =\n    /%(-?[0-9]+)?(\\.?-?[0-9]+)?([[\\]cdhmnprzxXyflosCMAF%])(\\{([^}]+)\\})?|([^%]+)/;\n\n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n\n  function categoryName(loggingEvent, specifier) {\n    let loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split('.');\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits\n          .slice(loggerNameBits.length - precision)\n          .join('.');\n      }\n    }\n    return loggerName;\n  }\n\n  function formatAsDate(loggingEvent, specifier) {\n    let format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      switch (format) {\n        case 'ISO8601':\n        case 'ISO8601_FORMAT':\n          format = dateFormat.ISO8601_FORMAT;\n          break;\n        case 'ISO8601_WITH_TZ_OFFSET':\n        case 'ISO8601_WITH_TZ_OFFSET_FORMAT':\n          format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n          break;\n        case 'ABSOLUTE':\n          process.emitWarning(\n            'Pattern %d{ABSOLUTE} is deprecated in favor of %d{ABSOLUTETIME}. ' +\n              'Please use %d{ABSOLUTETIME} instead.',\n            'DeprecationWarning',\n            'log4js-node-DEP0003'\n          );\n          debug(\n            '[log4js-node-DEP0003]',\n            'DEPRECATION: Pattern %d{ABSOLUTE} is deprecated and replaced by %d{ABSOLUTETIME}.'\n          );\n        // falls through\n        case 'ABSOLUTETIME':\n        case 'ABSOLUTETIME_FORMAT':\n          format = dateFormat.ABSOLUTETIME_FORMAT;\n          break;\n        case 'DATE':\n          process.emitWarning(\n            'Pattern %d{DATE} is deprecated due to the confusion it causes when used. ' +\n              'Please use %d{DATETIME} instead.',\n            'DeprecationWarning',\n            'log4js-node-DEP0004'\n          );\n          debug(\n            '[log4js-node-DEP0004]',\n            'DEPRECATION: Pattern %d{DATE} is deprecated and replaced by %d{DATETIME}.'\n          );\n        // falls through\n        case 'DATETIME':\n        case 'DATETIME_FORMAT':\n          format = dateFormat.DATETIME_FORMAT;\n          break;\n        // no default\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime);\n  }\n\n  function hostname() {\n    return os.hostname().toString();\n  }\n\n  function formatMessage(loggingEvent, specifier) {\n    let dataSlice = loggingEvent.data;\n    if (specifier) {\n      const [lowerBound, upperBound] = specifier.split(',');\n      dataSlice = dataSlice.slice(lowerBound, upperBound);\n    }\n    return util.format(...dataSlice);\n  }\n\n  function endOfLine() {\n    return os.EOL;\n  }\n\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime);\n  }\n\n  function startColour(loggingEvent) {\n    return colorizeStart(loggingEvent.level.colour);\n  }\n\n  function endColour(loggingEvent) {\n    return colorizeEnd(loggingEvent.level.colour);\n  }\n\n  function percent() {\n    return '%';\n  }\n\n  function pid(loggingEvent) {\n    return loggingEvent && loggingEvent.pid\n      ? loggingEvent.pid.toString()\n      : process.pid.toString();\n  }\n\n  function clusterInfo() {\n    // this used to try to return the master and worker pids,\n    // but it would never have worked because master pid is not available to workers\n    // leaving this here to maintain compatibility for patterns\n    return pid();\n  }\n\n  function userDefined(loggingEvent, specifier) {\n    if (typeof tokens[specifier] !== 'undefined') {\n      return typeof tokens[specifier] === 'function'\n        ? tokens[specifier](loggingEvent)\n        : tokens[specifier];\n    }\n\n    return null;\n  }\n\n  function contextDefined(loggingEvent, specifier) {\n    const resolver = loggingEvent.context[specifier];\n\n    if (typeof resolver !== 'undefined') {\n      return typeof resolver === 'function' ? resolver(loggingEvent) : resolver;\n    }\n\n    return null;\n  }\n\n  function fileName(loggingEvent, specifier) {\n    let filename = loggingEvent.fileName || '';\n\n    // support for ESM as it uses url instead of path for file\n    /* istanbul ignore next: unsure how to simulate ESM for test coverage */\n    const convertFileURLToPath = function (filepath) {\n      const urlPrefix = 'file://';\n      if (filepath.startsWith(urlPrefix)) {\n        // https://nodejs.org/api/url.html#urlfileurltopathurl\n        if (typeof url.fileURLToPath === 'function') {\n          filepath = url.fileURLToPath(filepath);\n        }\n        // backward-compatible for nodejs pre-10.12.0 (without url.fileURLToPath method)\n        else {\n          // posix: file:///hello/world/foo.txt -> /hello/world/foo.txt -> /hello/world/foo.txt\n          // win32: file:///C:/path/foo.txt     -> /C:/path/foo.txt     -> \\C:\\path\\foo.txt     -> C:\\path\\foo.txt\n          // win32: file://nas/foo.txt          -> //nas/foo.txt        -> nas\\foo.txt          -> \\\\nas\\foo.txt\n          filepath = path.normalize(\n            filepath.replace(new RegExp(`^${urlPrefix}`), '')\n          );\n          if (process.platform === 'win32') {\n            if (filepath.startsWith('\\\\')) {\n              filepath = filepath.slice(1);\n            } else {\n              filepath = path.sep + path.sep + filepath;\n            }\n          }\n        }\n      }\n      return filepath;\n    };\n    filename = convertFileURLToPath(filename);\n\n    if (specifier) {\n      const fileDepth = parseInt(specifier, 10);\n      const fileList = filename.split(path.sep);\n      if (fileList.length > fileDepth) {\n        filename = fileList.slice(-fileDepth).join(path.sep);\n      }\n    }\n\n    return filename;\n  }\n\n  function lineNumber(loggingEvent) {\n    return loggingEvent.lineNumber ? `${loggingEvent.lineNumber}` : '';\n  }\n\n  function columnNumber(loggingEvent) {\n    return loggingEvent.columnNumber ? `${loggingEvent.columnNumber}` : '';\n  }\n\n  function callStack(loggingEvent) {\n    return loggingEvent.callStack || '';\n  }\n\n  function className(loggingEvent) {\n    return loggingEvent.className || '';\n  }\n\n  function functionName(loggingEvent) {\n    return loggingEvent.functionName || '';\n  }\n\n  function functionAlias(loggingEvent) {\n    return loggingEvent.functionAlias || '';\n  }\n\n  function callerName(loggingEvent) {\n    return loggingEvent.callerName || '';\n  }\n\n  const replacers = {\n    c: categoryName,\n    d: formatAsDate,\n    h: hostname,\n    m: formatMessage,\n    n: endOfLine,\n    p: logLevel,\n    r: startTime,\n    '[': startColour,\n    ']': endColour,\n    y: clusterInfo,\n    z: pid,\n    '%': percent,\n    x: userDefined,\n    X: contextDefined,\n    f: fileName,\n    l: lineNumber,\n    o: columnNumber,\n    s: callStack,\n    C: className,\n    M: functionName,\n    A: functionAlias,\n    F: callerName,\n  };\n\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n\n  function truncate(truncation, toTruncate) {\n    let len;\n    if (truncation) {\n      len = parseInt(truncation.slice(1), 10);\n      // negative truncate length means truncate from end of string\n      return len > 0 ? toTruncate.slice(0, len) : toTruncate.slice(len);\n    }\n\n    return toTruncate;\n  }\n\n  function pad(padding, toPad) {\n    let len;\n    if (padding) {\n      if (padding.charAt(0) === '-') {\n        len = parseInt(padding.slice(1), 10);\n        // Right pad with spaces\n        while (toPad.length < len) {\n          toPad += ' ';\n        }\n      } else {\n        len = parseInt(padding, 10);\n        // Left pad with spaces\n        while (toPad.length < len) {\n          toPad = ` ${toPad}`;\n        }\n      }\n    }\n    return toPad;\n  }\n\n  function truncateAndPad(toTruncAndPad, truncation, padding) {\n    let replacement = toTruncAndPad;\n    replacement = truncate(truncation, replacement);\n    replacement = pad(padding, replacement);\n    return replacement;\n  }\n\n  return function (loggingEvent) {\n    let formattedString = '';\n    let result;\n    let searchString = pattern;\n\n    while ((result = regex.exec(searchString)) !== null) {\n      // const matchedString = result[0];\n      const padding = result[1];\n      const truncation = result[2];\n      const conversionCharacter = result[3];\n      const specifier = result[5];\n      const text = result[6];\n\n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += text.toString();\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        const replacement = replaceToken(\n          conversionCharacter,\n          loggingEvent,\n          specifier\n        );\n        formattedString += truncateAndPad(replacement, truncation, padding);\n      }\n      searchString = searchString.slice(result.index + result[0].length);\n    }\n    return formattedString;\n  };\n}\n\nconst layoutMakers = {\n  messagePassThrough() {\n    return messagePassThroughLayout;\n  },\n  basic() {\n    return basicLayout;\n  },\n  colored() {\n    return colouredLayout;\n  },\n  coloured() {\n    return colouredLayout;\n  },\n  pattern(config) {\n    return patternLayout(config && config.pattern, config && config.tokens);\n  },\n  dummy() {\n    return dummyLayout;\n  },\n};\n\nmodule.exports = {\n  basicLayout,\n  messagePassThroughLayout,\n  patternLayout,\n  colouredLayout,\n  coloredLayout: colouredLayout,\n  dummyLayout,\n  addLayout(name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n  layout(name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}